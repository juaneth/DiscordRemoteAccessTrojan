"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const pkg = require("pjson");
const timeout = 4000;
const headers = [
    {
        name: 'User-Agent',
        value: `Pastebin-ts/${pkg.version}`,
    },
    {
        name: 'Cache-Control',
        value: 'no-cache',
    },
];
const getOptions = (method, params = {}) => {
    const options = {
        resolveWithFullResponse: true,
        method,
        headers,
        timeout,
        followRedirect: true,
    };
    if (method === 'GET') {
        options.qs = params;
    }
    else if (method === 'POST') {
        options.form = params;
    }
    return options;
};
exports.getOptions = getOptions;
const handleResponse = (response, resolve, reject) => {
    if (response === null || response === undefined) {
        reject(new Error('No response!'));
    }
    else {
        const { statusCode, body } = response;
        if (lodash_1.isNull(statusCode) || lodash_1.isUndefined(statusCode)) {
            reject(new Error('Unknown status'));
        }
        else if (statusCode === 404) {
            reject(new Error('Error 404, not found'));
        }
        else if (statusCode !== 200) {
            reject(new Error(`Unknown error, status: ${statusCode}`));
        }
        else if (lodash_1.isNull(body) || lodash_1.isUndefined(body) || body === '') {
            reject(new Error('Empty response'));
        }
        else if (body.indexOf('Bad API request') !== -1) {
            reject(new Error(body));
        }
        else if (body.indexOf('Post limit') !== -1) {
            reject(new Error(`Error: ${body}`));
        }
        else {
            resolve(body);
        }
    }
};
exports.handleResponse = handleResponse;
